# -*- coding: utf-8 -*-
"""MSTchangesOrNot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vBegcblHyvce9FjMcahWb9gJ5QVu9YBO
"""

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, w):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append((v, w))
        self.graph[v].append((u, w))

    def dfs(self, start, end, visited, path, weights):
        visited[start] = True
        path.append(start)
        if start == end:
            print("Path from {} to {}:".format(path[0], path[-1]), " -> ".join(map(str, path)))
            print("Maximum edge weight in the path:", max(weights))
            if max(weights) < new_edge_weight:
                print("MST remains the same")
            else:
                print("MST changes")
            return True
        for neighbor, weight in self.graph[start]:
            if not visited[neighbor]:
                if self.dfs(neighbor, end, visited, path, weights + [weight]):
                    return True
        path.pop()
        return False

    def find_path_in_mst(self, start, end):
        visited = {node: False for node in self.graph}
        path = []
        weights = []
        self.dfs(start, end, visited, path, weights)

mst = Graph()
mst.add_edge(2, 3, 2)
mst.add_edge(2, 4, 1)
mst.add_edge(4, 1, 3)
mst.add_edge(4, 5, 6)

new_edge_start_node = 2
new_edge_end_node = 1
new_edge_weight = 1
mst.find_path_in_mst(new_edge_start_node, new_edge_end_node)